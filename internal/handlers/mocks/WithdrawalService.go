// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	queries "github.com/eduardtungatarov/gofermart/internal/repository/withdrawal/queries"
)

// WithdrawalService is an autogenerated mock type for the WithdrawalService type
type WithdrawalService struct {
	mock.Mock
}

// GetUserWithdrawals provides a mock function with given fields: ctx
func (_m *WithdrawalService) GetUserWithdrawals(ctx context.Context) ([]queries.Withdrawal, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithdrawals")
	}

	var r0 []queries.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]queries.Withdrawal, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []queries.Withdrawal); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWithdrawal provides a mock function with given fields: ctx, orderNumber, sum
func (_m *WithdrawalService) SaveWithdrawal(ctx context.Context, orderNumber string, sum int) error {
	ret := _m.Called(ctx, orderNumber, sum)

	if len(ret) == 0 {
		panic("no return value specified for SaveWithdrawal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, orderNumber, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWithdrawalService creates a new instance of WithdrawalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawalService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawalService {
	mock := &WithdrawalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
