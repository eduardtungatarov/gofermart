// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	queries "github.com/eduardtungatarov/gofermart/internal/repository/withdrawal/queries"
)

// WithdrawalRepository is an autogenerated mock type for the WithdrawalRepository type
type WithdrawalRepository struct {
	mock.Mock
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *WithdrawalRepository) FindByUserID(ctx context.Context, userID int) ([]queries.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []queries.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]queries.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []queries.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWithdrawal provides a mock function with given fields: ctx, withdrawal
func (_m *WithdrawalRepository) SaveWithdrawal(ctx context.Context, withdrawal queries.Withdrawal) error {
	ret := _m.Called(ctx, withdrawal)

	if len(ret) == 0 {
		panic("no return value specified for SaveWithdrawal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.Withdrawal) error); ok {
		r0 = rf(ctx, withdrawal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWithdrawalRepository creates a new instance of WithdrawalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawalRepository {
	mock := &WithdrawalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
