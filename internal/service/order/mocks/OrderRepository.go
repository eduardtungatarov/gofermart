// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	queries "github.com/eduardtungatarov/gofermart/internal/repository/order/queries"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// FindByInProgressStatuses provides a mock function with given fields: ctx
func (_m *OrderRepository) FindByInProgressStatuses(ctx context.Context) ([]queries.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindByInProgressStatuses")
	}

	var r0 []queries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]queries.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []queries.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: ctx, userID
func (_m *OrderRepository) FindByUserId(ctx context.Context, userID int) ([]queries.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []queries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]queries.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []queries.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderByOrderNumber provides a mock function with given fields: ctx, orderNumber
func (_m *OrderRepository) FindOrderByOrderNumber(ctx context.Context, orderNumber string) (queries.Order, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindOrderByOrderNumber")
	}

	var r0 queries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (queries.Order, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) queries.Order); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		r0 = ret.Get(0).(queries.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOrder provides a mock function with given fields: ctx, _a1
func (_m *OrderRepository) SaveOrder(ctx context.Context, _a1 queries.Order) (queries.Order, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 queries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.Order) (queries.Order, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queries.Order) queries.Order); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(queries.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, queries.Order) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, orderNumber, status, accrual
func (_m *OrderRepository) UpdateOrder(ctx context.Context, orderNumber string, status string, accrual int) error {
	ret := _m.Called(ctx, orderNumber, status, accrual)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, orderNumber, status, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
