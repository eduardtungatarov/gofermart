// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: withdrawal.sql

package queries

import (
	"context"
)

const FindByUserId = `-- name: FindByUserId :many
SELECT id, user_id, order_number, sum, processed_at FROM withdrawals
WHERE user_id = $1
ORDER BY processed_at desc
`

// FindByUserId
//
//	SELECT id, user_id, order_number, sum, processed_at FROM withdrawals
//	WHERE user_id = $1
//	ORDER BY processed_at desc
func (q *Queries) FindByUserId(ctx context.Context, db DBTX, userID int) ([]Withdrawal, error) {
	rows, err := db.QueryContext(ctx, FindByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Withdrawal
	for rows.Next() {
		var i Withdrawal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderNumber,
			&i.Sum,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SaveWithdrawal = `-- name: SaveWithdrawal :one
INSERT INTO withdrawals (user_id, order_number, sum)
VALUES ($1, $2, $3)
RETURNING id, user_id, order_number, sum, processed_at
`

type SaveWithdrawalParams struct {
	UserID      int
	OrderNumber string
	Sum         int
}

// SaveWithdrawal
//
//	INSERT INTO withdrawals (user_id, order_number, sum)
//	VALUES ($1, $2, $3)
//	RETURNING id, user_id, order_number, sum, processed_at
func (q *Queries) SaveWithdrawal(ctx context.Context, db DBTX, arg SaveWithdrawalParams) (Withdrawal, error) {
	row := db.QueryRowContext(ctx, SaveWithdrawal, arg.UserID, arg.OrderNumber, arg.Sum)
	var i Withdrawal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderNumber,
		&i.Sum,
		&i.ProcessedAt,
	)
	return i, err
}
