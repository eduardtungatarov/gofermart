// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package queries

import (
	"context"
)

const FindByUserId = `-- name: FindByUserId :many
SELECT id, user_id, order_number, status, accrual, uploaded_at FROM orders
WHERE user_id = $1
ORDER BY uploaded_at desc
`

// FindByUserId
//
//	SELECT id, user_id, order_number, status, accrual, uploaded_at FROM orders
//	WHERE user_id = $1
//	ORDER BY uploaded_at desc
func (q *Queries) FindByUserId(ctx context.Context, db DBTX, userID int) ([]Order, error) {
	rows, err := db.QueryContext(ctx, FindByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderNumber,
			&i.Status,
			&i.Accrual,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const FindOrderByOrderNumber = `-- name: FindOrderByOrderNumber :one
SELECT id, user_id, order_number, status, accrual, uploaded_at FROM orders
WHERE order_number = $1 LIMIT 1
`

// FindOrderByOrderNumber
//
//	SELECT id, user_id, order_number, status, accrual, uploaded_at FROM orders
//	WHERE order_number = $1 LIMIT 1
func (q *Queries) FindOrderByOrderNumber(ctx context.Context, db DBTX, orderNumber string) (Order, error) {
	row := db.QueryRowContext(ctx, FindOrderByOrderNumber, orderNumber)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderNumber,
		&i.Status,
		&i.Accrual,
		&i.UploadedAt,
	)
	return i, err
}

const SaveOrder = `-- name: SaveOrder :one
INSERT INTO orders (user_id, order_number, status, accrual)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, order_number, status, accrual, uploaded_at
`

type SaveOrderParams struct {
	UserID      int
	OrderNumber string
	Status      string
	Accrual     int
}

// SaveOrder
//
//	INSERT INTO orders (user_id, order_number, status, accrual)
//	VALUES ($1, $2, $3, $4)
//	RETURNING id, user_id, order_number, status, accrual, uploaded_at
func (q *Queries) SaveOrder(ctx context.Context, db DBTX, arg SaveOrderParams) (Order, error) {
	row := db.QueryRowContext(ctx, SaveOrder,
		arg.UserID,
		arg.OrderNumber,
		arg.Status,
		arg.Accrual,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderNumber,
		&i.Status,
		&i.Accrual,
		&i.UploadedAt,
	)
	return i, err
}
